package models

import (
	"errors"
	"time"

	"go.mongodb.org/mongo-driver/v2/bson"
)

type Address struct {
	No         string `json:"no" bson:"no"`
	Street     string `json:"street" bson:"street"`
	Town       string `json:"town" bson:"town"`
	City       string `json:"city" bson:"city"`
	PostalCode string `json:"postal_code" bson:"postal_code"`
}

type Restaurent struct {
	Id bson.ObjectID `json:"id" bson:"_id,omitempty"`
	Name string `json:"name" bson:"name"`
	RegistrationNo string `json:"registration_no" bson:"registration_no"`
	Address Address `json:"address" bson:"address"`
	Owner bson.ObjectID `json:"owner" bson:"owner"`
	Logo string `json:"logo" bson:"logo"`
	Cover string `json:"cover" bson:"cover"`
	Description string `json:"description" bson:"description"`
	Tags []string `json:"tags" bson:"tags"`
	CreatedAt time.Time      `json:"created_at" bson:"created_at"`
	UpdatedAt time.Time      `json:"updated_at" bson:"updated_at"`
	DeletedAt *time.Time      `json:"deleted_at,omitempty" bson:"deleted_at,omitempty"`
}

type RestaurentUpdate struct {
	Name        string   `json:"name" validate:"omitempty,min=2,max=100" bson:"name,omitempty"`
	Address     *Address `json:"address" validate:"omitempty" bson:"address,omitempty"` 
	Description string   `json:"description" validate:"omitempty,max=500" bson:"description,omitempty"`
	Tags        []string `json:"tags" validate:"omitempty,dive,min=1,max=20" bson:"tags,omitempty"` 
	Logo		string 	`json:"logo" validate:"omitempty,filepath" bson:"logo"`
	Cover		string 	`json:"cover" validate:"omitempty,filepath" bson:"cover"`
}

type RestaurentCreate struct {
	RestaurentUpdate                  // Embeds Name, Address, Description, Tags validation/fields
	RegistrationNo   string `json:"registration_no" validate:"required"`
	OwnerID          string `json:"owner_id" validate:"required,hexadecimal,len=24"` // Owner ID as string from request
}

func (rc *RestaurentCreate) ToRestaurent() (*Restaurent, error) {
	ownerObjID, err := bson.ObjectIDFromHex(rc.OwnerID)
	if err != nil {
		return nil, errors.New("invalid owner_id format: " + err.Error())
	}

	var addr Address
	if rc.Address != nil {
		addr = *rc.Address
	}

	restaurent := &Restaurent{
		// ID will be generated by MongoDB
		Name:           rc.Name, // from embedded RestaurentUpdate
		RegistrationNo: rc.RegistrationNo,
		Address:        addr, // from embedded RestaurentUpdate (or default)
		Owner:          ownerObjID,
		Description:    rc.Description, // from embedded RestaurentUpdate
		Tags:           rc.Tags,        // from embedded RestaurentUpdate
		Logo:           rc.Logo,
		Cover:          rc.Cover,
	}

	return restaurent, nil
}

func (u *Restaurent) MarshalBSON() ([]byte, error) {
	if u.CreatedAt.IsZero() {
		u.CreatedAt = time.Now()
	}
	u.UpdatedAt = time.Now()

	type t Restaurent
	return bson.Marshal((*t)(u))
}
