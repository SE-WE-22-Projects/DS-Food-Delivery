// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc1
// source: restaurent-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RestaurentService_GetItemsById_FullMethodName      = "/RestaurentService/GetItemsById"
	RestaurentService_GetRestaurentById_FullMethodName = "/RestaurentService/GetRestaurentById"
)

// RestaurentServiceClient is the client API for RestaurentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurentServiceClient interface {
	// Gets the items
	GetItemsById(ctx context.Context, in *ItemIdList, opts ...grpc.CallOption) (*ItemList, error)
	GetRestaurentById(ctx context.Context, in *RestaurentId, opts ...grpc.CallOption) (*Restaurent, error)
}

type restaurentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurentServiceClient(cc grpc.ClientConnInterface) RestaurentServiceClient {
	return &restaurentServiceClient{cc}
}

func (c *restaurentServiceClient) GetItemsById(ctx context.Context, in *ItemIdList, opts ...grpc.CallOption) (*ItemList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemList)
	err := c.cc.Invoke(ctx, RestaurentService_GetItemsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurentServiceClient) GetRestaurentById(ctx context.Context, in *RestaurentId, opts ...grpc.CallOption) (*Restaurent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Restaurent)
	err := c.cc.Invoke(ctx, RestaurentService_GetRestaurentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurentServiceServer is the server API for RestaurentService service.
// All implementations must embed UnimplementedRestaurentServiceServer
// for forward compatibility.
type RestaurentServiceServer interface {
	// Gets the items
	GetItemsById(context.Context, *ItemIdList) (*ItemList, error)
	GetRestaurentById(context.Context, *RestaurentId) (*Restaurent, error)
	mustEmbedUnimplementedRestaurentServiceServer()
}

// UnimplementedRestaurentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurentServiceServer struct{}

func (UnimplementedRestaurentServiceServer) GetItemsById(context.Context, *ItemIdList) (*ItemList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsById not implemented")
}
func (UnimplementedRestaurentServiceServer) GetRestaurentById(context.Context, *RestaurentId) (*Restaurent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurentById not implemented")
}
func (UnimplementedRestaurentServiceServer) mustEmbedUnimplementedRestaurentServiceServer() {}
func (UnimplementedRestaurentServiceServer) testEmbeddedByValue()                           {}

// UnsafeRestaurentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurentServiceServer will
// result in compilation errors.
type UnsafeRestaurentServiceServer interface {
	mustEmbedUnimplementedRestaurentServiceServer()
}

func RegisterRestaurentServiceServer(s grpc.ServiceRegistrar, srv RestaurentServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestaurentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestaurentService_ServiceDesc, srv)
}

func _RestaurentService_GetItemsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurentServiceServer).GetItemsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurentService_GetItemsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurentServiceServer).GetItemsById(ctx, req.(*ItemIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurentService_GetRestaurentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurentServiceServer).GetRestaurentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurentService_GetRestaurentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurentServiceServer).GetRestaurentById(ctx, req.(*RestaurentId))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurentService_ServiceDesc is the grpc.ServiceDesc for RestaurentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RestaurentService",
	HandlerType: (*RestaurentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemsById",
			Handler:    _RestaurentService_GetItemsById_Handler,
		},
		{
			MethodName: "GetRestaurentById",
			Handler:    _RestaurentService_GetRestaurentById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurent-service.proto",
}
