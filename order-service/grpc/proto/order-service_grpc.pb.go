// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// Gets the total price of an order
	GetOrderPrice(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*OrderPrice, error)
	// Sets the payment status of the order
	SetPaymentStatus(ctx context.Context, in *PaymentStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sets if the restaurant accepted the order
	SetRestaurantStatus(ctx context.Context, in *RestaurantStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sets the delivery driver for the order
	SetDeliveryDriver(ctx context.Context, in *OrderDriver, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Set the deliver status
	SetDeliveryStatus(ctx context.Context, in *DeliveryProgress, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrderPrice(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*OrderPrice, error) {
	out := new(OrderPrice)
	err := c.cc.Invoke(ctx, "/OrderService/GetOrderPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetPaymentStatus(ctx context.Context, in *PaymentStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OrderService/SetPaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetRestaurantStatus(ctx context.Context, in *RestaurantStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OrderService/SetRestaurantStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetDeliveryDriver(ctx context.Context, in *OrderDriver, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OrderService/SetDeliveryDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetDeliveryStatus(ctx context.Context, in *DeliveryProgress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/OrderService/SetDeliveryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// Gets the total price of an order
	GetOrderPrice(context.Context, *OrderId) (*OrderPrice, error)
	// Sets the payment status of the order
	SetPaymentStatus(context.Context, *PaymentStatus) (*emptypb.Empty, error)
	// Sets if the restaurant accepted the order
	SetRestaurantStatus(context.Context, *RestaurantStatus) (*emptypb.Empty, error)
	// Sets the delivery driver for the order
	SetDeliveryDriver(context.Context, *OrderDriver) (*emptypb.Empty, error)
	// Set the deliver status
	SetDeliveryStatus(context.Context, *DeliveryProgress) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) GetOrderPrice(context.Context, *OrderId) (*OrderPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPrice not implemented")
}
func (UnimplementedOrderServiceServer) SetPaymentStatus(context.Context, *PaymentStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPaymentStatus not implemented")
}
func (UnimplementedOrderServiceServer) SetRestaurantStatus(context.Context, *RestaurantStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRestaurantStatus not implemented")
}
func (UnimplementedOrderServiceServer) SetDeliveryDriver(context.Context, *OrderDriver) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeliveryDriver not implemented")
}
func (UnimplementedOrderServiceServer) SetDeliveryStatus(context.Context, *DeliveryProgress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeliveryStatus not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_GetOrderPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetOrderPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderPrice(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/SetPaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetPaymentStatus(ctx, req.(*PaymentStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetRestaurantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetRestaurantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/SetRestaurantStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetRestaurantStatus(ctx, req.(*RestaurantStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetDeliveryDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDriver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetDeliveryDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/SetDeliveryDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetDeliveryDriver(ctx, req.(*OrderDriver))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/SetDeliveryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetDeliveryStatus(ctx, req.(*DeliveryProgress))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderPrice",
			Handler:    _OrderService_GetOrderPrice_Handler,
		},
		{
			MethodName: "SetPaymentStatus",
			Handler:    _OrderService_SetPaymentStatus_Handler,
		},
		{
			MethodName: "SetRestaurantStatus",
			Handler:    _OrderService_SetRestaurantStatus_Handler,
		},
		{
			MethodName: "SetDeliveryDriver",
			Handler:    _OrderService_SetDeliveryDriver_Handler,
		},
		{
			MethodName: "SetDeliveryStatus",
			Handler:    _OrderService_SetDeliveryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order-service.proto",
}
