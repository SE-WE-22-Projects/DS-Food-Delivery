services:
  api-gateway:
    image: nginx
    restart: always
    volumes:
      - type: bind
        source: ./api-gateway/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - 8090:80

    healthcheck:
      test: service nginx status || exit 1
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

    develop:
      watch:
        - action: sync+restart
          path: ./api-gateway/nginx.conf
          target: /etc/nginx/conf.d/default.conf
    depends_on:
      - user-service
      - order-service
      - restaurant-service
      - delivery-service
      - upload-service
      - payment-service
      - review-service

  user-service:
    build: ./user-service
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./user-service/
    secrets:
      - jwt_private_key
    env_file: ".env"

  order-service:
    build: ./order-service
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./order-service/
    env_file: ".env"
    secrets:
      - jwt_key

  upload-service:
    build: ./upload-service
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./upload-service/
    volumes:
      - uploads:/uploads
    env_file: ".env"
    environment:
      APP_UPLOAD_DIRECTORY: /uploads
      APP_UPLOAD_URL_PREFIX: /api/v1/
    secrets:
      - jwt_key

  payment-service:
    build: ./payment-service
    restart: always
    env_file: ".env"

  review-service:
    build: ./review-service
    restart: always
    env_file: ".env"

  restaurant-service:
    build: ./restaurant-service
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: ./restaurant-service/
    env_file: ".env"
    secrets:
      - jwt_key

  delivery-service:
    build: ./delivery-service
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./delivery-service/
    env_file: ".env"
    secrets:
      - jwt_key

  notification-service:
    build: ./notification-service
    restart: always
    env_file: ".env"
    develop:
      watch:
        - action: rebuild
          path: ./notification-service/src
    depends_on:
      - kafka-broker

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka-broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
  # web-ui:
  #   build: ./web-ui
  #   restart: always
  #   ports:
  #     - 8091:80
  #   depends_on:
  #     - api-gateway
  #   develop:
  #     watch:
  #       - action: rebuild
  #         path: ./web-ui/src
  #       - action: rebuild
  #         path: ./web-ui/package.json
  #       - action: sync+restart
  #         path: ./web-ui/nginx.conf
  #         target: /etc/nginx/conf.d/default.conf


  # admin-ui:
  #   build: ./admin-ui
  #   restart: always
  #   ports:
  #     - 8092:80
  #   depends_on:
  #     - api-gateway
  #   develop:
  #     watch:
  #       - action: rebuild
  #         path: ./admin-ui/src
  #       - action: rebuild
  #         path: ./admin-ui/package.json
  #       - action: sync+restart
  #         path: ./admin-ui/nginx.conf
  #         target: /etc/nginx/conf.d/default.conf

  # mongo-express:
  #   image: mongo-express
  #   # restart: on-failure
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - mongo

  # mongo:
  #   image: mongo
  #   restart: always
  #   command: 
  #    - "--config"
  #    - "/etc/mongod.conf"
  #   healthcheck:
  #     test: echo "try { rs.status() } catch (err) { rs.initiate() }" | mongosh 
  #     interval: 5s
  #     timeout: 30s
  #     start_period: 0s
  #     start_interval: 1s
  #     retries: 30

  #   volumes:
  #     - mongo-data:/data/db
  #     - ./mongo/mongod.conf:/etc/mongod.conf
  #   develop:
  #     watch:
  #     - action: restart
  #       path: ./mongo


volumes:
  mongo-data:
  uploads:


secrets:
  jwt_key:
    file: ./service.priv.key

  jwt_private_key:
    file: ./service.priv.key
